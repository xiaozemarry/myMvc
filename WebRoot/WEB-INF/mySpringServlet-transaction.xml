<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        classpath:../spring-xsd/spring-beans-3.2.xsd
        http://www.springframework.org/schema/context
        classpath:../spring-xsd/spring-context-3.2.xsd
        http://www.springframework.org/schema/mvc
        classpath:../spring-xsd/spring-mvc-3.2.xsd
		http://www.springframework.org/schema/tx 
		classpath:../spring-xsd/spring-tx-3.2.xsd
		http://www.springframework.org/schema/aop 
        classpath:../spring-xsd/spring-aop-3.2.xsd
        ">
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		 <property name="dataSource" ref="dataSource" /> 
	</bean>
	<!-- 配置事务传播特性 -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<!-- 
				REQUIRED：支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择。 
				SUPPORTS：支持当前事务，如果当前没有事务，就以非事务方式执行。 
				MANDATORY：支持当前事务，如果当前没有事务，就抛出异常。 
				REQUIRES_NEW：新建事务，如果当前存在事务，把当前事务挂起。 
				NOT_SUPPORTED：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。 
				NEVER：以非事务方式执行，如果当前存在事务，则抛出异常。 
				NESTED：支持当前事务，如果当前事务存在，则执行一个嵌套事务，如果当前没有事务，就新建一个事务
			 -->
			 <tx:method name="get*" read-only="true"/>
			 <tx:method name="find*" read-only="true"/>
			 <tx:method name="fetch*" read-only="true"/>
			 <tx:method name="search*" read-only="true"/>
			 <!-- rollback-for出现这种异常回滚,可以有多.','号分割 -->
			 <!-- no-rollback-for出现这种异常不回滚,可以有多.','号分割 -->
		     <tx:method name="update*" propagation="REQUIRED" rollback-for="Throwable" no-rollback-for="java.lang.NullPointerException"/>
		     <tx:method name="insert*" propagation="REQUIRED" rollback-for="Throwable"/>
		     <!-- other methods use the default transaction(REQUIRED) settings (see below) -->
    		 <tx:method name="*" rollback-for="Throwable"/>
		</tx:attributes>
	</tx:advice>
	<!-- 配置参与事务的类 -->
	<aop:config proxy-target-class="true">
		<aop:pointcut id="allTreansaction" expression="execution(* abstractentity.AbsEntity.*(..))" />
		<aop:advisor pointcut-ref="allTreansaction" advice-ref="txAdvice" />
	</aop:config>
	<aop:config proxy-target-class="true">
		<aop:pointcut id="userinfoTreansaction" expression="execution(* testtransaction.userinfo.UserInfo.update*(..))" />
		<aop:advisor pointcut-ref="userinfoTreansaction" advice-ref="txAdvice" />
	</aop:config>
</beans>